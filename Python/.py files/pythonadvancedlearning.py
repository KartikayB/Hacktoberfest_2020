# -*- coding: utf-8 -*-
"""PythonAdvancedLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fl4xCbygUbB90Gw8I9kQ9Mu1HgAxMihj
"""

num=[45,77,55,74,89,76,55]
print(list(map(lambda x:x%5,num )))
print(list(map(lambda x,y,z,a:str(x*2+y*2)+"z*2",num,num,num,num)))
print(list(map(lambda x,y,z:x*2+y*2+z*2,num,num,num)))

num=[45,77,55,74,89,76,55]
print(list(map(lambda x:x%5,num )))
print(list(map(lambda x,y,z,a:str(x*2+y*2)+"z*2",num,num,num,num)))
print(list(map(lambda x,y,z:x*2+y*2+z*2,num,num,num)))

words = iter(['Hello', 'world', 'I', 'am', 'Python'])
numbers = [1, 2, 3, 4]

zipped = zip(words, numbers,range(5))
for i in zipped:
    print(i)
    
for i in zipped:
    print(i)
    #zip returns an iterator which cannot be again traversed
    #skips all other elements
#next(zipped)

from functools import *
sum1=[[5,4,3,7,8],[7,4,2,1]]
a=[reduce(lambda x,y:sum1,sum1) for i in sum1]
for i in a:
    print(i)

ar=[]
def my(*args):
    for i in args :
        ar.append(i)
my([i for i in range(10)],[i for i in range (10,20) ])    
print(ar)

def my_union(lst1,lst2):
    a=[]
    for i in lst1:
        if(i not in a):
            a.append(i)
    for j in lst2:
         if(j  not in a):
            a.append(j)
    return a
my_union([4,5,6],[1,2,3,4,5])

def my_intersection(l1,l2):
    a=[i for i in l1 if(i in l2)]
    return a
my_intersection([1,2,3,4,5,6],[4,5,6,7,8,9])

def my_diff(l1,l2):
    a=[i for i in l1 if(i not in l2)]
    return a
my_diff([1,2,3,4,5,6],[4,5,6,7,8,9])

gen_e = (i for i in range(1000000))

type(gen_e)

a=()
type(a)

