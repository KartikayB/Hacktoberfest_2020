# -*- coding: utf-8 -*-
"""IP-Lab-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jxHErXafS09-d04u5HxYV_pVCJPGqo3K

**Importing libraries**
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from PIL import Image
import requests
from io import BytesIO
from google.colab.patches import cv2_imshow
import cv2

url = requests.get('https://i.imgur.com/1gq3anY.jpeg')
img = Image.open(BytesIO(url.content))
img.save("q1.png")

"""**Converting Image to grey scale**"""

img_grey = img.convert("LA")
img_grey.save("q1_grey.png")

f, axarr = plt.subplots(2)
axarr[0].imshow(img)
axarr[1].imshow(img_grey)

"""**Converting Image to grey scale using matplotlib**"""

def rgb2gray(rgb):
    return np.dot(rgb[...,:3], [0.2989, 0.5870, 0.1140])

img = mpimg.imread('q1.png')     
gray = rgb2gray(img)    
plt.imshow(gray, cmap=plt.get_cmap('gray'), vmin=0, vmax=1)
plt.show()

url = requests.get('https://i.imgur.com/I6Phm23.jpg')
img = Image.open(BytesIO(url.content))
img.save("q2.png")

"""**Steps**
1. Read the image
2. Define function to covert from rgb to grey using dot product
3. Use that function on the read image
4. Check and save the image

**Adding Images**
"""

img1 = cv2.imread('q1.png')
img2 = cv2.imread('q2.png')
dst = cv2.addWeighted(img1,0.4,img2,0.6,0)
cv2_imshow(dst)

"""**Subtracting Images**"""

dst = cv2.subtract(img1,img2)
cv2_imshow(dst)

"""**Multiplying Images**"""

dst = img1*img2
cv2_imshow(dst)

"""**RGB to HSV**"""

HSV_img = cv2.cvtColor(img1,cv2.COLOR_BGR2HSV)
cv2_imshow(HSV_img)

"""**Resizing using Nearest**"""

near_img = cv2.resize(img1,None, fx = 0.5, fy = 0.5, interpolation = cv2.INTER_NEAREST)
plt.imshow(near_img)

"""**Resizing using Bilinear**"""

bilinear_img = cv2.resize(img1,None, fx = 0.5, fy = 0.5, interpolation = cv2.INTER_LINEAR)
plt.imshow(bilinear_img)

"""**Resizing using Bicubic**"""

bicubic_img = cv2.resize(img1,None, fx = 0.5, fy = 0.5, interpolation = cv2.INTER_CUBIC)
plt.imshow(bicubic_img)

"""**Observations**
1. Bilinear resizing produces the sharpest image
2. While nearest neighbour produces the least sharpest image
3. This is due to the diffrence in the pixel processing method
"""

