# -*- coding: utf-8 -*-
"""SHARPENING FILTERS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ghUuNyziIVmEz05UdiYcEiSomHJ9PxsV

#SHARPENING FILTERS

1.	Write a program for edge detection using following methods:
•	Roberts, 
•	Prewitt, 
•	Sobel
•	Canny
Study the effect of these filters over input image and compare the results.
"""

import numpy as np
import matplotlib.pyplot as plt

from skimage.data import camera    
from skimage import filters
from skimage.filters import roberts, sobel, scharr, prewitt

image=camera()
plt.imshow(image,cmap=plt.cm.gray)

image.shape

"""ROBERTS"""

edge_roberts=filters.roberts(image)
plt.imshow(edge_roberts, cmap=plt.cm.gray)

"""SOBEL"""

import cv2

img_sobelx = cv2.Sobel(image,cv2.CV_8U,1,0,ksize=5)
img_sobely = cv2.Sobel(image,cv2.CV_8U,0,1,ksize=5)
edge_sobel = img_sobelx + img_sobely
plt.imshow(edge_sobel, cmap=plt.cm.gray)

"""PREWITT"""

edge_prewitt=filters.prewitt(image)
plt.imshow(edge_prewitt,cmap=plt.cm.gray)

"""CANNY"""

edge_canny= cv2.Canny(image,100,200)
plt.imshow(edge_canny, cmap=plt.cm.gray)

"""Study the effect of these filters over input image and compare the results."""

fig, axes = plt.subplots(ncols=2, nrows=2, sharex=True, sharey=True,
                         figsize=(8, 8))

axes[0,0].imshow(edge_roberts, cmap=plt.cm.gray)
axes[0,0].set_title('Roberts Edge Detection')

axes[0,1].imshow(edge_sobel, cmap=plt.cm.gray)
axes[0,1].set_title('Sobel Edge Detection')

axes[1,0].imshow(edge_prewitt, cmap=plt.cm.gray)
axes[1,0].set_title('Prewitt Edge Detection')

axes[1,1].imshow(edge_canny, cmap=plt.cm.gray)
axes[1,1].set_title('Canny Edge Detection')


plt.tight_layout()
plt.show()

"""2.	Compare the results obtained by following two approaches.

a)	Edge detection using Laplacian mask
"""

image=camera()

from scipy import misc, signal
from scipy import ndimage, misc
from skimage.io import imread
from skimage.color import rgb2gray
from skimage.filters import threshold_otsu

im = rgb2gray(imread('/content/800px-Parrot.jpg')).astype(float)
print(np.max(im))
print(im.shape)

plt.imshow(im, cmap=plt.cm.gray)

laplacian_im = cv2.Laplacian(im,cv2.CV_64F)

plt.imshow(laplacian_im,cmap=plt.cm.gray)

"""b)	Apply Gaussian followed by Laplace to study LoG filter. Does it show an improvement? Justify"""

fig, axes = plt.subplots(ncols=2, sharex=True, sharey=True,
                         figsize=(8, 8))

axes[0].imshow(im, cmap=plt.cm.gray)
axes[0].set_title('Original')

axes[1].imshow(laplacian_im, cmap=plt.cm.gray)
axes[1].set_title('Laplacian')



plt.tight_layout()
plt.show()

"""3.	Combining Spatial Enhancement Methods

Follow these steps:

a)	Read an input image (grayscale)
"""

image3=imread("comb.png")
image3 = cv2.cvtColor(image3, cv2.COLOR_BGR2GRAY)
plt.imshow(image3,cmap=plt.cm.gray)

"""b)	Laplacian of a)"""

laplacian = cv2.Laplacian(image3,cv2.CV_64F)
plt.imshow(laplacian,cmap=plt.cm.gray)

"""c)	Add a) and b). By this, sharpened image will be obtained"""

res=laplacian+image3
plt.imshow(res,cmap=plt.cm.gray)

"""d)	Sobel of a)"""

edge_sobel = filters.sobel(image3)
plt.imshow(edge_sobel, cmap=plt.cm.gray)

"""e)	Sobel image smoothed with a 5*5 averaging filter"""

edge_sobel_filter = cv2.blur(edge_sobel,(5,5))
plt.imshow(edge_sobel_filter, cmap=plt.cm.gray)

"""f)	Mask image formed by the product of (c) and (e)."""

mul = cv2.multiply(res, edge_sobel_filter)
plt.imshow(mul, cmap=plt.cm.gray)

"""g)	Sharpened image obtained by the sum of (a) and (f)."""

final = mul + image3
plt.imshow(final, cmap=plt.cm.gray)

"""Comparing the Final Result"""

fig, axes = plt.subplots(ncols=2, sharex=True, sharey=True,
                         figsize=(8, 8))

axes[0].imshow(image3, cmap=plt.cm.gray)
axes[0].set_title('Original')

axes[1].imshow(final, cmap=plt.cm.gray)
axes[1].set_title('Enhanced')



plt.tight_layout()
plt.show()

